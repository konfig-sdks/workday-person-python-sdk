# coding: utf-8

"""
    person

    The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.

    The version of the OpenAPI document: v4
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_person_python_sdk import schemas  # noqa: F401


class Name33e26848dc0010002f1ae76d63ec0061(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def title() -> typing.Type['Title11c67b72c9c610000edf72f0b3c5004f']:
                        return Title11c67b72c9c610000edf72f0b3c5004f
                    secondaryLocal = schemas.StrSchema
                    secondaryLast = schemas.StrSchema
                
                    @staticmethod
                    def salutation() -> typing.Type['Salutation11c67b72c9c610000edf7291ae7b004c']:
                        return Salutation11c67b72c9c610000edf7291ae7b004c
                    primary = schemas.StrSchema
                    primaryLocal2 = schemas.StrSchema
                    tertiaryLast = schemas.StrSchema
                    full = schemas.StrSchema
                
                    @staticmethod
                    def social() -> typing.Type['Social11c67b72c9c610000edf72e003d1004e']:
                        return Social11c67b72c9c610000edf72e003d1004e
                    firstLocal = schemas.StrSchema
                    first = schemas.StrSchema
                
                    @staticmethod
                    def hereditary() -> typing.Type['Hereditary11c67b72c9c610000edf72cf8506004d']:
                        return Hereditary11c67b72c9c610000edf72cf8506004d
                    middleLocal = schemas.StrSchema
                    firstLocal2 = schemas.StrSchema
                    primaryLocal = schemas.StrSchema
                
                    @staticmethod
                    def country() -> typing.Type['Country33e26848dc0010002f1ae802adc30074']:
                        return Country33e26848dc0010002f1ae802adc30074
                    middle = schemas.StrSchema
                    descriptor = schemas.StrSchema
                    id = schemas.StrSchema
                    __annotations__ = {
                        "title": title,
                        "secondaryLocal": secondaryLocal,
                        "secondaryLast": secondaryLast,
                        "salutation": salutation,
                        "primary": primary,
                        "primaryLocal2": primaryLocal2,
                        "tertiaryLast": tertiaryLast,
                        "full": full,
                        "social": social,
                        "firstLocal": firstLocal,
                        "first": first,
                        "hereditary": hereditary,
                        "middleLocal": middleLocal,
                        "firstLocal2": firstLocal2,
                        "primaryLocal": primaryLocal,
                        "country": country,
                        "middle": middle,
                        "descriptor": descriptor,
                        "id": id,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["title"]) -> 'Title11c67b72c9c610000edf72f0b3c5004f': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["secondaryLocal"]) -> MetaOapg.properties.secondaryLocal: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["secondaryLast"]) -> MetaOapg.properties.secondaryLast: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["salutation"]) -> 'Salutation11c67b72c9c610000edf7291ae7b004c': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["primary"]) -> MetaOapg.properties.primary: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["primaryLocal2"]) -> MetaOapg.properties.primaryLocal2: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["tertiaryLast"]) -> MetaOapg.properties.tertiaryLast: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["full"]) -> MetaOapg.properties.full: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["social"]) -> 'Social11c67b72c9c610000edf72e003d1004e': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["firstLocal"]) -> MetaOapg.properties.firstLocal: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["first"]) -> MetaOapg.properties.first: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["hereditary"]) -> 'Hereditary11c67b72c9c610000edf72cf8506004d': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["middleLocal"]) -> MetaOapg.properties.middleLocal: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["firstLocal2"]) -> MetaOapg.properties.firstLocal2: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["primaryLocal"]) -> MetaOapg.properties.primaryLocal: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["country"]) -> 'Country33e26848dc0010002f1ae802adc30074': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["middle"]) -> MetaOapg.properties.middle: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["descriptor"]) -> MetaOapg.properties.descriptor: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "secondaryLocal", "secondaryLast", "salutation", "primary", "primaryLocal2", "tertiaryLast", "full", "social", "firstLocal", "first", "hereditary", "middleLocal", "firstLocal2", "primaryLocal", "country", "middle", "descriptor", "id", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union['Title11c67b72c9c610000edf72f0b3c5004f', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["secondaryLocal"]) -> typing.Union[MetaOapg.properties.secondaryLocal, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["secondaryLast"]) -> typing.Union[MetaOapg.properties.secondaryLast, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["salutation"]) -> typing.Union['Salutation11c67b72c9c610000edf7291ae7b004c', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["primary"]) -> typing.Union[MetaOapg.properties.primary, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["primaryLocal2"]) -> typing.Union[MetaOapg.properties.primaryLocal2, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["tertiaryLast"]) -> typing.Union[MetaOapg.properties.tertiaryLast, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["full"]) -> typing.Union[MetaOapg.properties.full, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["social"]) -> typing.Union['Social11c67b72c9c610000edf72e003d1004e', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["firstLocal"]) -> typing.Union[MetaOapg.properties.firstLocal, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["first"]) -> typing.Union[MetaOapg.properties.first, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["hereditary"]) -> typing.Union['Hereditary11c67b72c9c610000edf72cf8506004d', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["middleLocal"]) -> typing.Union[MetaOapg.properties.middleLocal, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["firstLocal2"]) -> typing.Union[MetaOapg.properties.firstLocal2, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["primaryLocal"]) -> typing.Union[MetaOapg.properties.primaryLocal, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union['Country33e26848dc0010002f1ae802adc30074', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["middle"]) -> typing.Union[MetaOapg.properties.middle, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["descriptor"]) -> typing.Union[MetaOapg.properties.descriptor, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "secondaryLocal", "secondaryLast", "salutation", "primary", "primaryLocal2", "tertiaryLast", "full", "social", "firstLocal", "first", "hereditary", "middleLocal", "firstLocal2", "primaryLocal", "country", "middle", "descriptor", "id", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                title: typing.Union['Title11c67b72c9c610000edf72f0b3c5004f', schemas.Unset] = schemas.unset,
                secondaryLocal: typing.Union[MetaOapg.properties.secondaryLocal, str, schemas.Unset] = schemas.unset,
                secondaryLast: typing.Union[MetaOapg.properties.secondaryLast, str, schemas.Unset] = schemas.unset,
                salutation: typing.Union['Salutation11c67b72c9c610000edf7291ae7b004c', schemas.Unset] = schemas.unset,
                primary: typing.Union[MetaOapg.properties.primary, str, schemas.Unset] = schemas.unset,
                primaryLocal2: typing.Union[MetaOapg.properties.primaryLocal2, str, schemas.Unset] = schemas.unset,
                tertiaryLast: typing.Union[MetaOapg.properties.tertiaryLast, str, schemas.Unset] = schemas.unset,
                full: typing.Union[MetaOapg.properties.full, str, schemas.Unset] = schemas.unset,
                social: typing.Union['Social11c67b72c9c610000edf72e003d1004e', schemas.Unset] = schemas.unset,
                firstLocal: typing.Union[MetaOapg.properties.firstLocal, str, schemas.Unset] = schemas.unset,
                first: typing.Union[MetaOapg.properties.first, str, schemas.Unset] = schemas.unset,
                hereditary: typing.Union['Hereditary11c67b72c9c610000edf72cf8506004d', schemas.Unset] = schemas.unset,
                middleLocal: typing.Union[MetaOapg.properties.middleLocal, str, schemas.Unset] = schemas.unset,
                firstLocal2: typing.Union[MetaOapg.properties.firstLocal2, str, schemas.Unset] = schemas.unset,
                primaryLocal: typing.Union[MetaOapg.properties.primaryLocal, str, schemas.Unset] = schemas.unset,
                country: typing.Union['Country33e26848dc0010002f1ae802adc30074', schemas.Unset] = schemas.unset,
                middle: typing.Union[MetaOapg.properties.middle, str, schemas.Unset] = schemas.unset,
                descriptor: typing.Union[MetaOapg.properties.descriptor, str, schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    title=title,
                    secondaryLocal=secondaryLocal,
                    secondaryLast=secondaryLast,
                    salutation=salutation,
                    primary=primary,
                    primaryLocal2=primaryLocal2,
                    tertiaryLast=tertiaryLast,
                    full=full,
                    social=social,
                    firstLocal=firstLocal,
                    first=first,
                    hereditary=hereditary,
                    middleLocal=middleLocal,
                    firstLocal2=firstLocal2,
                    primaryLocal=primaryLocal,
                    country=country,
                    middle=middle,
                    descriptor=descriptor,
                    id=id,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Name33e26848dc0010002f1ae76d63ec0061':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_person_python_sdk.model.country33e26848dc0010002f1ae802adc30074 import Country33e26848dc0010002f1ae802adc30074
from workday_person_python_sdk.model.hereditary11c67b72c9c610000edf72cf8506004d import Hereditary11c67b72c9c610000edf72cf8506004d
from workday_person_python_sdk.model.salutation11c67b72c9c610000edf7291ae7b004c import Salutation11c67b72c9c610000edf7291ae7b004c
from workday_person_python_sdk.model.social11c67b72c9c610000edf72e003d1004e import Social11c67b72c9c610000edf72e003d1004e
from workday_person_python_sdk.model.title11c67b72c9c610000edf72f0b3c5004f import Title11c67b72c9c610000edf72f0b3c5004f
