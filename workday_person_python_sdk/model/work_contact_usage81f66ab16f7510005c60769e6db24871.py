# coding: utf-8

"""
    person

    The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.

    The version of the OpenAPI document: v4
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_person_python_sdk import schemas  # noqa: F401


class WorkContactUsage81f66ab16f7510005c60769e6db24871(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    public = schemas.BoolSchema
                    comment = schemas.StrSchema
                    
                    
                    class usedFor(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['UsageBehavior33e26848dc0010003a3c3827858901b4']:
                                return UsageBehavior33e26848dc0010003a3c3827858901b4
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['UsageBehavior33e26848dc0010003a3c3827858901b4'], typing.List['UsageBehavior33e26848dc0010003a3c3827858901b4']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'usedFor':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'UsageBehavior33e26848dc0010003a3c3827858901b4':
                            return super().__getitem__(i)
                
                    @staticmethod
                    def usageType() -> typing.Type['UsageType81f66ab16f7510005c6076c4248b4875']:
                        return UsageType81f66ab16f7510005c6076c4248b4875
                    primary = schemas.BoolSchema
                    __annotations__ = {
                        "public": public,
                        "comment": comment,
                        "usedFor": usedFor,
                        "usageType": usageType,
                        "primary": primary,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["public"]) -> MetaOapg.properties.public: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["usedFor"]) -> MetaOapg.properties.usedFor: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["usageType"]) -> 'UsageType81f66ab16f7510005c6076c4248b4875': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["primary"]) -> MetaOapg.properties.primary: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["public", "comment", "usedFor", "usageType", "primary", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["public"]) -> typing.Union[MetaOapg.properties.public, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["usedFor"]) -> typing.Union[MetaOapg.properties.usedFor, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["usageType"]) -> typing.Union['UsageType81f66ab16f7510005c6076c4248b4875', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["primary"]) -> typing.Union[MetaOapg.properties.primary, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["public", "comment", "usedFor", "usageType", "primary", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                public: typing.Union[MetaOapg.properties.public, bool, schemas.Unset] = schemas.unset,
                comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
                usedFor: typing.Union[MetaOapg.properties.usedFor, list, tuple, schemas.Unset] = schemas.unset,
                usageType: typing.Union['UsageType81f66ab16f7510005c6076c4248b4875', schemas.Unset] = schemas.unset,
                primary: typing.Union[MetaOapg.properties.primary, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    public=public,
                    comment=comment,
                    usedFor=usedFor,
                    usageType=usageType,
                    primary=primary,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkContactUsage81f66ab16f7510005c60769e6db24871':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_person_python_sdk.model.usage_behavior33e26848dc0010003a3c3827858901b4 import UsageBehavior33e26848dc0010003a3c3827858901b4
from workday_person_python_sdk.model.usage_type81f66ab16f7510005c6076c4248b4875 import UsageType81f66ab16f7510005c6076c4248b4875
