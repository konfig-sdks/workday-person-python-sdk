# coding: utf-8

"""
    person

    The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.

    The version of the OpenAPI document: v4
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_person_python_sdk import schemas  # noqa: F401


class PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def usage() -> typing.Type['UsageDf014bc8b5fa10000b2c21c8738d00e7']:
                        return UsageDf014bc8b5fa10000b2c21c8738d00e7
                
                    @staticmethod
                    def countryPhoneCode() -> typing.Type['CountryPhoneCodeA58f621b14ee1000185bf335b38401cb']:
                        return CountryPhoneCodeA58f621b14ee1000185bf335b38401cb
                    completePhoneNumber = schemas.StrSchema
                    extension = schemas.StrSchema
                
                    @staticmethod
                    def deviceType() -> typing.Type['DeviceTypeA58f621b14ee100018ac4d72f02901ea']:
                        return DeviceTypeA58f621b14ee100018ac4d72f02901ea
                    descriptor = schemas.StrSchema
                    id = schemas.StrSchema
                    __annotations__ = {
                        "usage": usage,
                        "countryPhoneCode": countryPhoneCode,
                        "completePhoneNumber": completePhoneNumber,
                        "extension": extension,
                        "deviceType": deviceType,
                        "descriptor": descriptor,
                        "id": id,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["usage"]) -> 'UsageDf014bc8b5fa10000b2c21c8738d00e7': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["countryPhoneCode"]) -> 'CountryPhoneCodeA58f621b14ee1000185bf335b38401cb': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["completePhoneNumber"]) -> MetaOapg.properties.completePhoneNumber: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["extension"]) -> MetaOapg.properties.extension: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["deviceType"]) -> 'DeviceTypeA58f621b14ee100018ac4d72f02901ea': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["descriptor"]) -> MetaOapg.properties.descriptor: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["usage", "countryPhoneCode", "completePhoneNumber", "extension", "deviceType", "descriptor", "id", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["usage"]) -> typing.Union['UsageDf014bc8b5fa10000b2c21c8738d00e7', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["countryPhoneCode"]) -> typing.Union['CountryPhoneCodeA58f621b14ee1000185bf335b38401cb', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["completePhoneNumber"]) -> typing.Union[MetaOapg.properties.completePhoneNumber, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["extension"]) -> typing.Union[MetaOapg.properties.extension, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["deviceType"]) -> typing.Union['DeviceTypeA58f621b14ee100018ac4d72f02901ea', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["descriptor"]) -> typing.Union[MetaOapg.properties.descriptor, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["usage", "countryPhoneCode", "completePhoneNumber", "extension", "deviceType", "descriptor", "id", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                usage: typing.Union['UsageDf014bc8b5fa10000b2c21c8738d00e7', schemas.Unset] = schemas.unset,
                countryPhoneCode: typing.Union['CountryPhoneCodeA58f621b14ee1000185bf335b38401cb', schemas.Unset] = schemas.unset,
                completePhoneNumber: typing.Union[MetaOapg.properties.completePhoneNumber, str, schemas.Unset] = schemas.unset,
                extension: typing.Union[MetaOapg.properties.extension, str, schemas.Unset] = schemas.unset,
                deviceType: typing.Union['DeviceTypeA58f621b14ee100018ac4d72f02901ea', schemas.Unset] = schemas.unset,
                descriptor: typing.Union[MetaOapg.properties.descriptor, str, schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    usage=usage,
                    countryPhoneCode=countryPhoneCode,
                    completePhoneNumber=completePhoneNumber,
                    extension=extension,
                    deviceType=deviceType,
                    descriptor=descriptor,
                    id=id,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_person_python_sdk.model.country_phone_code_a58f621b14ee1000185bf335b38401cb import CountryPhoneCodeA58f621b14ee1000185bf335b38401cb
from workday_person_python_sdk.model.device_type_a58f621b14ee100018ac4d72f02901ea import DeviceTypeA58f621b14ee100018ac4d72f02901ea
from workday_person_python_sdk.model.usage_df014bc8b5fa10000b2c21c8738d00e7 import UsageDf014bc8b5fa10000b2c21c8738d00e7
