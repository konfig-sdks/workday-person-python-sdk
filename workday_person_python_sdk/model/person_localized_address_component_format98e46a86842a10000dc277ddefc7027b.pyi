# coding: utf-8

"""
    person

    The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.

    The version of the OpenAPI document: v4
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_person_python_sdk import schemas  # noqa: F401


class PersonLocalizedAddressComponentFormat98e46a86842a10000dc277ddefc7027b(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    type = schemas.StrSchema
                    order = schemas.StrSchema
                    label = schemas.StrSchema
                
                    @staticmethod
                    def componentType() -> typing.Type['ComponentType98e46a86842a10000dc278233c7e0280']:
                        return ComponentType98e46a86842a10000dc278233c7e0280
                    webServiceAlias = schemas.StrSchema
                    required = schemas.BoolSchema
                    __annotations__ = {
                        "type": type,
                        "order": order,
                        "label": label,
                        "componentType": componentType,
                        "webServiceAlias": webServiceAlias,
                        "required": required,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["componentType"]) -> 'ComponentType98e46a86842a10000dc278233c7e0280': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["webServiceAlias"]) -> MetaOapg.properties.webServiceAlias: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "order", "label", "componentType", "webServiceAlias", "required", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> typing.Union[MetaOapg.properties.order, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["componentType"]) -> typing.Union['ComponentType98e46a86842a10000dc278233c7e0280', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["webServiceAlias"]) -> typing.Union[MetaOapg.properties.webServiceAlias, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["required"]) -> typing.Union[MetaOapg.properties.required, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "order", "label", "componentType", "webServiceAlias", "required", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                order: typing.Union[MetaOapg.properties.order, str, schemas.Unset] = schemas.unset,
                label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
                componentType: typing.Union['ComponentType98e46a86842a10000dc278233c7e0280', schemas.Unset] = schemas.unset,
                webServiceAlias: typing.Union[MetaOapg.properties.webServiceAlias, str, schemas.Unset] = schemas.unset,
                required: typing.Union[MetaOapg.properties.required, bool, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    type=type,
                    order=order,
                    label=label,
                    componentType=componentType,
                    webServiceAlias=webServiceAlias,
                    required=required,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PersonLocalizedAddressComponentFormat98e46a86842a10000dc277ddefc7027b':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_person_python_sdk.model.component_type98e46a86842a10000dc278233c7e0280 import ComponentType98e46a86842a10000dc278233c7e0280
