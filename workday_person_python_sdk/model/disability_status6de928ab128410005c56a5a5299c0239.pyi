# coding: utf-8

"""
    person

    The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.

    The version of the OpenAPI document: v4
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_person_python_sdk import schemas  # noqa: F401


class DisabilityStatus6de928ab128410005c56a5a5299c0239(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def disability() -> typing.Type['Disability6de928ab128410005c56a64ec69f024f']:
                        return Disability6de928ab128410005c56a64ec69f024f
                
                    @staticmethod
                    def certificationBasis() -> typing.Type['CertificationBasis6de928ab128410005c56a638b9d4024c']:
                        return CertificationBasis6de928ab128410005c56a638b9d4024c
                    certificationID = schemas.StrSchema
                
                    @staticmethod
                    def grade() -> typing.Type['Grade6de928ab128410005c56a5feed2e0244']:
                        return Grade6de928ab128410005c56a5feed2e0244
                    rehabilitationProvided = schemas.StrSchema
                    accommodationRequested = schemas.StrSchema
                    workRestrictions = schemas.StrSchema
                    certifiedBy = schemas.StrSchema
                    statusDate = schemas.DateSchema
                    degreePercent = schemas.IntSchema
                    knownDate = schemas.DateSchema
                    endDate = schemas.DateSchema
                    accommodationProvided = schemas.StrSchema
                    certifiedAt = schemas.StrSchema
                    severityRecognitionDate = schemas.DateSchema
                    
                    
                    class workerDocuments(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['WorkerDocument15d8b82e323110000e0117c92d9803b2']:
                                return WorkerDocument15d8b82e323110000e0117c92d9803b2
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['WorkerDocument15d8b82e323110000e0117c92d9803b2'], typing.List['WorkerDocument15d8b82e323110000e0117c92d9803b2']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'workerDocuments':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'WorkerDocument15d8b82e323110000e0117c92d9803b2':
                            return super().__getitem__(i)
                    note = schemas.StrSchema
                    remainingCapacity = schemas.IntSchema
                    statusID = schemas.StrSchema
                    fteTowardQuota = schemas.IntSchema
                    rehabilitationRequested = schemas.StrSchema
                    descriptor = schemas.StrSchema
                    __annotations__ = {
                        "disability": disability,
                        "certificationBasis": certificationBasis,
                        "certificationID": certificationID,
                        "grade": grade,
                        "rehabilitationProvided": rehabilitationProvided,
                        "accommodationRequested": accommodationRequested,
                        "workRestrictions": workRestrictions,
                        "certifiedBy": certifiedBy,
                        "statusDate": statusDate,
                        "degreePercent": degreePercent,
                        "knownDate": knownDate,
                        "endDate": endDate,
                        "accommodationProvided": accommodationProvided,
                        "certifiedAt": certifiedAt,
                        "severityRecognitionDate": severityRecognitionDate,
                        "workerDocuments": workerDocuments,
                        "note": note,
                        "remainingCapacity": remainingCapacity,
                        "statusID": statusID,
                        "fteTowardQuota": fteTowardQuota,
                        "rehabilitationRequested": rehabilitationRequested,
                        "descriptor": descriptor,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["disability"]) -> 'Disability6de928ab128410005c56a64ec69f024f': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["certificationBasis"]) -> 'CertificationBasis6de928ab128410005c56a638b9d4024c': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["certificationID"]) -> MetaOapg.properties.certificationID: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["grade"]) -> 'Grade6de928ab128410005c56a5feed2e0244': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["rehabilitationProvided"]) -> MetaOapg.properties.rehabilitationProvided: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["accommodationRequested"]) -> MetaOapg.properties.accommodationRequested: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["workRestrictions"]) -> MetaOapg.properties.workRestrictions: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["certifiedBy"]) -> MetaOapg.properties.certifiedBy: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["statusDate"]) -> MetaOapg.properties.statusDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["degreePercent"]) -> MetaOapg.properties.degreePercent: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["knownDate"]) -> MetaOapg.properties.knownDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["accommodationProvided"]) -> MetaOapg.properties.accommodationProvided: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["certifiedAt"]) -> MetaOapg.properties.certifiedAt: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["severityRecognitionDate"]) -> MetaOapg.properties.severityRecognitionDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["workerDocuments"]) -> MetaOapg.properties.workerDocuments: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["remainingCapacity"]) -> MetaOapg.properties.remainingCapacity: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["statusID"]) -> MetaOapg.properties.statusID: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["fteTowardQuota"]) -> MetaOapg.properties.fteTowardQuota: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["rehabilitationRequested"]) -> MetaOapg.properties.rehabilitationRequested: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["descriptor"]) -> MetaOapg.properties.descriptor: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["disability", "certificationBasis", "certificationID", "grade", "rehabilitationProvided", "accommodationRequested", "workRestrictions", "certifiedBy", "statusDate", "degreePercent", "knownDate", "endDate", "accommodationProvided", "certifiedAt", "severityRecognitionDate", "workerDocuments", "note", "remainingCapacity", "statusID", "fteTowardQuota", "rehabilitationRequested", "descriptor", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["disability"]) -> typing.Union['Disability6de928ab128410005c56a64ec69f024f', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["certificationBasis"]) -> typing.Union['CertificationBasis6de928ab128410005c56a638b9d4024c', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["certificationID"]) -> typing.Union[MetaOapg.properties.certificationID, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["grade"]) -> typing.Union['Grade6de928ab128410005c56a5feed2e0244', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["rehabilitationProvided"]) -> typing.Union[MetaOapg.properties.rehabilitationProvided, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["accommodationRequested"]) -> typing.Union[MetaOapg.properties.accommodationRequested, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["workRestrictions"]) -> typing.Union[MetaOapg.properties.workRestrictions, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["certifiedBy"]) -> typing.Union[MetaOapg.properties.certifiedBy, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["statusDate"]) -> typing.Union[MetaOapg.properties.statusDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["degreePercent"]) -> typing.Union[MetaOapg.properties.degreePercent, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["knownDate"]) -> typing.Union[MetaOapg.properties.knownDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["accommodationProvided"]) -> typing.Union[MetaOapg.properties.accommodationProvided, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["certifiedAt"]) -> typing.Union[MetaOapg.properties.certifiedAt, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["severityRecognitionDate"]) -> typing.Union[MetaOapg.properties.severityRecognitionDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["workerDocuments"]) -> typing.Union[MetaOapg.properties.workerDocuments, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["remainingCapacity"]) -> typing.Union[MetaOapg.properties.remainingCapacity, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["statusID"]) -> typing.Union[MetaOapg.properties.statusID, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["fteTowardQuota"]) -> typing.Union[MetaOapg.properties.fteTowardQuota, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["rehabilitationRequested"]) -> typing.Union[MetaOapg.properties.rehabilitationRequested, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["descriptor"]) -> typing.Union[MetaOapg.properties.descriptor, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["disability", "certificationBasis", "certificationID", "grade", "rehabilitationProvided", "accommodationRequested", "workRestrictions", "certifiedBy", "statusDate", "degreePercent", "knownDate", "endDate", "accommodationProvided", "certifiedAt", "severityRecognitionDate", "workerDocuments", "note", "remainingCapacity", "statusID", "fteTowardQuota", "rehabilitationRequested", "descriptor", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                disability: typing.Union['Disability6de928ab128410005c56a64ec69f024f', schemas.Unset] = schemas.unset,
                certificationBasis: typing.Union['CertificationBasis6de928ab128410005c56a638b9d4024c', schemas.Unset] = schemas.unset,
                certificationID: typing.Union[MetaOapg.properties.certificationID, str, schemas.Unset] = schemas.unset,
                grade: typing.Union['Grade6de928ab128410005c56a5feed2e0244', schemas.Unset] = schemas.unset,
                rehabilitationProvided: typing.Union[MetaOapg.properties.rehabilitationProvided, str, schemas.Unset] = schemas.unset,
                accommodationRequested: typing.Union[MetaOapg.properties.accommodationRequested, str, schemas.Unset] = schemas.unset,
                workRestrictions: typing.Union[MetaOapg.properties.workRestrictions, str, schemas.Unset] = schemas.unset,
                certifiedBy: typing.Union[MetaOapg.properties.certifiedBy, str, schemas.Unset] = schemas.unset,
                statusDate: typing.Union[MetaOapg.properties.statusDate, str, date, schemas.Unset] = schemas.unset,
                degreePercent: typing.Union[MetaOapg.properties.degreePercent, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                knownDate: typing.Union[MetaOapg.properties.knownDate, str, date, schemas.Unset] = schemas.unset,
                endDate: typing.Union[MetaOapg.properties.endDate, str, date, schemas.Unset] = schemas.unset,
                accommodationProvided: typing.Union[MetaOapg.properties.accommodationProvided, str, schemas.Unset] = schemas.unset,
                certifiedAt: typing.Union[MetaOapg.properties.certifiedAt, str, schemas.Unset] = schemas.unset,
                severityRecognitionDate: typing.Union[MetaOapg.properties.severityRecognitionDate, str, date, schemas.Unset] = schemas.unset,
                workerDocuments: typing.Union[MetaOapg.properties.workerDocuments, list, tuple, schemas.Unset] = schemas.unset,
                note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
                remainingCapacity: typing.Union[MetaOapg.properties.remainingCapacity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                statusID: typing.Union[MetaOapg.properties.statusID, str, schemas.Unset] = schemas.unset,
                fteTowardQuota: typing.Union[MetaOapg.properties.fteTowardQuota, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                rehabilitationRequested: typing.Union[MetaOapg.properties.rehabilitationRequested, str, schemas.Unset] = schemas.unset,
                descriptor: typing.Union[MetaOapg.properties.descriptor, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    disability=disability,
                    certificationBasis=certificationBasis,
                    certificationID=certificationID,
                    grade=grade,
                    rehabilitationProvided=rehabilitationProvided,
                    accommodationRequested=accommodationRequested,
                    workRestrictions=workRestrictions,
                    certifiedBy=certifiedBy,
                    statusDate=statusDate,
                    degreePercent=degreePercent,
                    knownDate=knownDate,
                    endDate=endDate,
                    accommodationProvided=accommodationProvided,
                    certifiedAt=certifiedAt,
                    severityRecognitionDate=severityRecognitionDate,
                    workerDocuments=workerDocuments,
                    note=note,
                    remainingCapacity=remainingCapacity,
                    statusID=statusID,
                    fteTowardQuota=fteTowardQuota,
                    rehabilitationRequested=rehabilitationRequested,
                    descriptor=descriptor,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DisabilityStatus6de928ab128410005c56a5a5299c0239':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_person_python_sdk.model.certification_basis6de928ab128410005c56a638b9d4024c import CertificationBasis6de928ab128410005c56a638b9d4024c
from workday_person_python_sdk.model.disability6de928ab128410005c56a64ec69f024f import Disability6de928ab128410005c56a64ec69f024f
from workday_person_python_sdk.model.grade6de928ab128410005c56a5feed2e0244 import Grade6de928ab128410005c56a5feed2e0244
from workday_person_python_sdk.model.worker_document15d8b82e323110000e0117c92d9803b2 import WorkerDocument15d8b82e323110000e0117c92d9803b2
