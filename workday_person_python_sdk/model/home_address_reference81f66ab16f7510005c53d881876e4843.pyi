# coding: utf-8

"""
    person

    The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.

    The version of the OpenAPI document: v4
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_person_python_sdk import schemas  # noqa: F401


class HomeAddressReference81f66ab16f7510005c53d881876e4843(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    citySubdivision2Local = schemas.StrSchema
                    addressLine9 = schemas.StrSchema
                    citySubdivision1Local = schemas.StrSchema
                    addressLine8Local = schemas.StrSchema
                    addressLine6 = schemas.StrSchema
                    effective = schemas.DateSchema
                    addressLine3 = schemas.StrSchema
                    postalCode = schemas.StrSchema
                    numberDaysWFH = schemas.IntSchema
                    addressLine2Local = schemas.StrSchema
                    cityLocal = schemas.StrSchema
                    addressLine6Local = schemas.StrSchema
                    addressLine1 = schemas.StrSchema
                    citySubdivision1 = schemas.StrSchema
                    regionSubdivision2 = schemas.StrSchema
                    city = schemas.StrSchema
                    addressLine4Local = schemas.StrSchema
                    regionSubdivision1 = schemas.StrSchema
                    addressLine7 = schemas.StrSchema
                    addressLine2 = schemas.StrSchema
                    addressLine5 = schemas.StrSchema
                    addressLine9Local = schemas.StrSchema
                    addressLine3Local = schemas.StrSchema
                
                    @staticmethod
                    def countryCity() -> typing.Type['CountryCity81f66ab16f7510005c53d89089074844']:
                        return CountryCity81f66ab16f7510005c53d89089074844
                    addressLine7Local = schemas.StrSchema
                    addressLine1Local = schemas.StrSchema
                
                    @staticmethod
                    def country() -> typing.Type['Country81f66ab16f7510005c53d8fd5f5b4852']:
                        return Country81f66ab16f7510005c53d8fd5f5b4852
                
                    @staticmethod
                    def countryRegion() -> typing.Type['CountryRegion81f66ab16f7510005c53d8be2fe44847']:
                        return CountryRegion81f66ab16f7510005c53d8be2fe44847
                    addressLine5Local = schemas.StrSchema
                    regionSubdivision1Local = schemas.StrSchema
                    addressLine4 = schemas.StrSchema
                
                    @staticmethod
                    def usage() -> typing.Type['Usage81f66ab16f7510005c53d917926f4857']:
                        return Usage81f66ab16f7510005c53d917926f4857
                    addressLine8 = schemas.StrSchema
                    citySubdivision2 = schemas.StrSchema
                    id = schemas.StrSchema
                    __annotations__ = {
                        "citySubdivision2Local": citySubdivision2Local,
                        "addressLine9": addressLine9,
                        "citySubdivision1Local": citySubdivision1Local,
                        "addressLine8Local": addressLine8Local,
                        "addressLine6": addressLine6,
                        "effective": effective,
                        "addressLine3": addressLine3,
                        "postalCode": postalCode,
                        "numberDaysWFH": numberDaysWFH,
                        "addressLine2Local": addressLine2Local,
                        "cityLocal": cityLocal,
                        "addressLine6Local": addressLine6Local,
                        "addressLine1": addressLine1,
                        "citySubdivision1": citySubdivision1,
                        "regionSubdivision2": regionSubdivision2,
                        "city": city,
                        "addressLine4Local": addressLine4Local,
                        "regionSubdivision1": regionSubdivision1,
                        "addressLine7": addressLine7,
                        "addressLine2": addressLine2,
                        "addressLine5": addressLine5,
                        "addressLine9Local": addressLine9Local,
                        "addressLine3Local": addressLine3Local,
                        "countryCity": countryCity,
                        "addressLine7Local": addressLine7Local,
                        "addressLine1Local": addressLine1Local,
                        "country": country,
                        "countryRegion": countryRegion,
                        "addressLine5Local": addressLine5Local,
                        "regionSubdivision1Local": regionSubdivision1Local,
                        "addressLine4": addressLine4,
                        "usage": usage,
                        "addressLine8": addressLine8,
                        "citySubdivision2": citySubdivision2,
                        "id": id,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["citySubdivision2Local"]) -> MetaOapg.properties.citySubdivision2Local: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine9"]) -> MetaOapg.properties.addressLine9: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["citySubdivision1Local"]) -> MetaOapg.properties.citySubdivision1Local: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine8Local"]) -> MetaOapg.properties.addressLine8Local: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine6"]) -> MetaOapg.properties.addressLine6: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["effective"]) -> MetaOapg.properties.effective: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine3"]) -> MetaOapg.properties.addressLine3: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["postalCode"]) -> MetaOapg.properties.postalCode: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["numberDaysWFH"]) -> MetaOapg.properties.numberDaysWFH: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine2Local"]) -> MetaOapg.properties.addressLine2Local: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["cityLocal"]) -> MetaOapg.properties.cityLocal: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine6Local"]) -> MetaOapg.properties.addressLine6Local: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine1"]) -> MetaOapg.properties.addressLine1: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["citySubdivision1"]) -> MetaOapg.properties.citySubdivision1: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["regionSubdivision2"]) -> MetaOapg.properties.regionSubdivision2: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine4Local"]) -> MetaOapg.properties.addressLine4Local: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["regionSubdivision1"]) -> MetaOapg.properties.regionSubdivision1: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine7"]) -> MetaOapg.properties.addressLine7: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine2"]) -> MetaOapg.properties.addressLine2: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine5"]) -> MetaOapg.properties.addressLine5: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine9Local"]) -> MetaOapg.properties.addressLine9Local: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine3Local"]) -> MetaOapg.properties.addressLine3Local: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["countryCity"]) -> 'CountryCity81f66ab16f7510005c53d89089074844': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine7Local"]) -> MetaOapg.properties.addressLine7Local: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine1Local"]) -> MetaOapg.properties.addressLine1Local: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["country"]) -> 'Country81f66ab16f7510005c53d8fd5f5b4852': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["countryRegion"]) -> 'CountryRegion81f66ab16f7510005c53d8be2fe44847': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine5Local"]) -> MetaOapg.properties.addressLine5Local: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["regionSubdivision1Local"]) -> MetaOapg.properties.regionSubdivision1Local: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine4"]) -> MetaOapg.properties.addressLine4: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["usage"]) -> 'Usage81f66ab16f7510005c53d917926f4857': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["addressLine8"]) -> MetaOapg.properties.addressLine8: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["citySubdivision2"]) -> MetaOapg.properties.citySubdivision2: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["citySubdivision2Local", "addressLine9", "citySubdivision1Local", "addressLine8Local", "addressLine6", "effective", "addressLine3", "postalCode", "numberDaysWFH", "addressLine2Local", "cityLocal", "addressLine6Local", "addressLine1", "citySubdivision1", "regionSubdivision2", "city", "addressLine4Local", "regionSubdivision1", "addressLine7", "addressLine2", "addressLine5", "addressLine9Local", "addressLine3Local", "countryCity", "addressLine7Local", "addressLine1Local", "country", "countryRegion", "addressLine5Local", "regionSubdivision1Local", "addressLine4", "usage", "addressLine8", "citySubdivision2", "id", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["citySubdivision2Local"]) -> typing.Union[MetaOapg.properties.citySubdivision2Local, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine9"]) -> typing.Union[MetaOapg.properties.addressLine9, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["citySubdivision1Local"]) -> typing.Union[MetaOapg.properties.citySubdivision1Local, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine8Local"]) -> typing.Union[MetaOapg.properties.addressLine8Local, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine6"]) -> typing.Union[MetaOapg.properties.addressLine6, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["effective"]) -> typing.Union[MetaOapg.properties.effective, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine3"]) -> typing.Union[MetaOapg.properties.addressLine3, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["postalCode"]) -> typing.Union[MetaOapg.properties.postalCode, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["numberDaysWFH"]) -> typing.Union[MetaOapg.properties.numberDaysWFH, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine2Local"]) -> typing.Union[MetaOapg.properties.addressLine2Local, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["cityLocal"]) -> typing.Union[MetaOapg.properties.cityLocal, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine6Local"]) -> typing.Union[MetaOapg.properties.addressLine6Local, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine1"]) -> typing.Union[MetaOapg.properties.addressLine1, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["citySubdivision1"]) -> typing.Union[MetaOapg.properties.citySubdivision1, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["regionSubdivision2"]) -> typing.Union[MetaOapg.properties.regionSubdivision2, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine4Local"]) -> typing.Union[MetaOapg.properties.addressLine4Local, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["regionSubdivision1"]) -> typing.Union[MetaOapg.properties.regionSubdivision1, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine7"]) -> typing.Union[MetaOapg.properties.addressLine7, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine2"]) -> typing.Union[MetaOapg.properties.addressLine2, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine5"]) -> typing.Union[MetaOapg.properties.addressLine5, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine9Local"]) -> typing.Union[MetaOapg.properties.addressLine9Local, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine3Local"]) -> typing.Union[MetaOapg.properties.addressLine3Local, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["countryCity"]) -> typing.Union['CountryCity81f66ab16f7510005c53d89089074844', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine7Local"]) -> typing.Union[MetaOapg.properties.addressLine7Local, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine1Local"]) -> typing.Union[MetaOapg.properties.addressLine1Local, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union['Country81f66ab16f7510005c53d8fd5f5b4852', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["countryRegion"]) -> typing.Union['CountryRegion81f66ab16f7510005c53d8be2fe44847', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine5Local"]) -> typing.Union[MetaOapg.properties.addressLine5Local, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["regionSubdivision1Local"]) -> typing.Union[MetaOapg.properties.regionSubdivision1Local, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine4"]) -> typing.Union[MetaOapg.properties.addressLine4, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["usage"]) -> typing.Union['Usage81f66ab16f7510005c53d917926f4857', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["addressLine8"]) -> typing.Union[MetaOapg.properties.addressLine8, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["citySubdivision2"]) -> typing.Union[MetaOapg.properties.citySubdivision2, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["citySubdivision2Local", "addressLine9", "citySubdivision1Local", "addressLine8Local", "addressLine6", "effective", "addressLine3", "postalCode", "numberDaysWFH", "addressLine2Local", "cityLocal", "addressLine6Local", "addressLine1", "citySubdivision1", "regionSubdivision2", "city", "addressLine4Local", "regionSubdivision1", "addressLine7", "addressLine2", "addressLine5", "addressLine9Local", "addressLine3Local", "countryCity", "addressLine7Local", "addressLine1Local", "country", "countryRegion", "addressLine5Local", "regionSubdivision1Local", "addressLine4", "usage", "addressLine8", "citySubdivision2", "id", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                citySubdivision2Local: typing.Union[MetaOapg.properties.citySubdivision2Local, str, schemas.Unset] = schemas.unset,
                addressLine9: typing.Union[MetaOapg.properties.addressLine9, str, schemas.Unset] = schemas.unset,
                citySubdivision1Local: typing.Union[MetaOapg.properties.citySubdivision1Local, str, schemas.Unset] = schemas.unset,
                addressLine8Local: typing.Union[MetaOapg.properties.addressLine8Local, str, schemas.Unset] = schemas.unset,
                addressLine6: typing.Union[MetaOapg.properties.addressLine6, str, schemas.Unset] = schemas.unset,
                effective: typing.Union[MetaOapg.properties.effective, str, date, schemas.Unset] = schemas.unset,
                addressLine3: typing.Union[MetaOapg.properties.addressLine3, str, schemas.Unset] = schemas.unset,
                postalCode: typing.Union[MetaOapg.properties.postalCode, str, schemas.Unset] = schemas.unset,
                numberDaysWFH: typing.Union[MetaOapg.properties.numberDaysWFH, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                addressLine2Local: typing.Union[MetaOapg.properties.addressLine2Local, str, schemas.Unset] = schemas.unset,
                cityLocal: typing.Union[MetaOapg.properties.cityLocal, str, schemas.Unset] = schemas.unset,
                addressLine6Local: typing.Union[MetaOapg.properties.addressLine6Local, str, schemas.Unset] = schemas.unset,
                addressLine1: typing.Union[MetaOapg.properties.addressLine1, str, schemas.Unset] = schemas.unset,
                citySubdivision1: typing.Union[MetaOapg.properties.citySubdivision1, str, schemas.Unset] = schemas.unset,
                regionSubdivision2: typing.Union[MetaOapg.properties.regionSubdivision2, str, schemas.Unset] = schemas.unset,
                city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
                addressLine4Local: typing.Union[MetaOapg.properties.addressLine4Local, str, schemas.Unset] = schemas.unset,
                regionSubdivision1: typing.Union[MetaOapg.properties.regionSubdivision1, str, schemas.Unset] = schemas.unset,
                addressLine7: typing.Union[MetaOapg.properties.addressLine7, str, schemas.Unset] = schemas.unset,
                addressLine2: typing.Union[MetaOapg.properties.addressLine2, str, schemas.Unset] = schemas.unset,
                addressLine5: typing.Union[MetaOapg.properties.addressLine5, str, schemas.Unset] = schemas.unset,
                addressLine9Local: typing.Union[MetaOapg.properties.addressLine9Local, str, schemas.Unset] = schemas.unset,
                addressLine3Local: typing.Union[MetaOapg.properties.addressLine3Local, str, schemas.Unset] = schemas.unset,
                countryCity: typing.Union['CountryCity81f66ab16f7510005c53d89089074844', schemas.Unset] = schemas.unset,
                addressLine7Local: typing.Union[MetaOapg.properties.addressLine7Local, str, schemas.Unset] = schemas.unset,
                addressLine1Local: typing.Union[MetaOapg.properties.addressLine1Local, str, schemas.Unset] = schemas.unset,
                country: typing.Union['Country81f66ab16f7510005c53d8fd5f5b4852', schemas.Unset] = schemas.unset,
                countryRegion: typing.Union['CountryRegion81f66ab16f7510005c53d8be2fe44847', schemas.Unset] = schemas.unset,
                addressLine5Local: typing.Union[MetaOapg.properties.addressLine5Local, str, schemas.Unset] = schemas.unset,
                regionSubdivision1Local: typing.Union[MetaOapg.properties.regionSubdivision1Local, str, schemas.Unset] = schemas.unset,
                addressLine4: typing.Union[MetaOapg.properties.addressLine4, str, schemas.Unset] = schemas.unset,
                usage: typing.Union['Usage81f66ab16f7510005c53d917926f4857', schemas.Unset] = schemas.unset,
                addressLine8: typing.Union[MetaOapg.properties.addressLine8, str, schemas.Unset] = schemas.unset,
                citySubdivision2: typing.Union[MetaOapg.properties.citySubdivision2, str, schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    citySubdivision2Local=citySubdivision2Local,
                    addressLine9=addressLine9,
                    citySubdivision1Local=citySubdivision1Local,
                    addressLine8Local=addressLine8Local,
                    addressLine6=addressLine6,
                    effective=effective,
                    addressLine3=addressLine3,
                    postalCode=postalCode,
                    numberDaysWFH=numberDaysWFH,
                    addressLine2Local=addressLine2Local,
                    cityLocal=cityLocal,
                    addressLine6Local=addressLine6Local,
                    addressLine1=addressLine1,
                    citySubdivision1=citySubdivision1,
                    regionSubdivision2=regionSubdivision2,
                    city=city,
                    addressLine4Local=addressLine4Local,
                    regionSubdivision1=regionSubdivision1,
                    addressLine7=addressLine7,
                    addressLine2=addressLine2,
                    addressLine5=addressLine5,
                    addressLine9Local=addressLine9Local,
                    addressLine3Local=addressLine3Local,
                    countryCity=countryCity,
                    addressLine7Local=addressLine7Local,
                    addressLine1Local=addressLine1Local,
                    country=country,
                    countryRegion=countryRegion,
                    addressLine5Local=addressLine5Local,
                    regionSubdivision1Local=regionSubdivision1Local,
                    addressLine4=addressLine4,
                    usage=usage,
                    addressLine8=addressLine8,
                    citySubdivision2=citySubdivision2,
                    id=id,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HomeAddressReference81f66ab16f7510005c53d881876e4843':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_person_python_sdk.model.country81f66ab16f7510005c53d8fd5f5b4852 import Country81f66ab16f7510005c53d8fd5f5b4852
from workday_person_python_sdk.model.country_city81f66ab16f7510005c53d89089074844 import CountryCity81f66ab16f7510005c53d89089074844
from workday_person_python_sdk.model.country_region81f66ab16f7510005c53d8be2fe44847 import CountryRegion81f66ab16f7510005c53d8be2fe44847
from workday_person_python_sdk.model.usage81f66ab16f7510005c53d917926f4857 import Usage81f66ab16f7510005c53d917926f4857
