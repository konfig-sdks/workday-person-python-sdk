# coding: utf-8

"""
    person

    The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.

    The version of the OpenAPI document: v4
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_person_python_sdk import schemas  # noqa: F401


class PersonRepresentationE451ce2c8b48100007c312f3f72700b3(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    photos = schemas.StrSchema
                    homeEmails = schemas.StrSchema
                    personalInformation = schemas.StrSchema
                    homeWebAddresses = schemas.StrSchema
                
                    @staticmethod
                    def universal_ID() -> typing.Type['UniversalIDE451ce2c8b48100007c31392a1ff00c2']:
                        return UniversalIDE451ce2c8b48100007c31392a1ff00c2
                    workInstantMessengers = schemas.StrSchema
                    homePhones = schemas.StrSchema
                    preferredName = schemas.StrSchema
                    workEmails = schemas.StrSchema
                    workAddresses = schemas.StrSchema
                    workWebAddresses = schemas.StrSchema
                    homeAddresses = schemas.StrSchema
                    legalName = schemas.StrSchema
                    audioNamePronunciation = schemas.StrSchema
                    socialNetworks = schemas.StrSchema
                    workPhones = schemas.StrSchema
                    additionalNames = schemas.StrSchema
                    homeInstantMessengers = schemas.StrSchema
                    href = schemas.StrSchema
                    id = schemas.StrSchema
                    __annotations__ = {
                        "photos": photos,
                        "homeEmails": homeEmails,
                        "personalInformation": personalInformation,
                        "homeWebAddresses": homeWebAddresses,
                        "universal_ID": universal_ID,
                        "workInstantMessengers": workInstantMessengers,
                        "homePhones": homePhones,
                        "preferredName": preferredName,
                        "workEmails": workEmails,
                        "workAddresses": workAddresses,
                        "workWebAddresses": workWebAddresses,
                        "homeAddresses": homeAddresses,
                        "legalName": legalName,
                        "audioNamePronunciation": audioNamePronunciation,
                        "socialNetworks": socialNetworks,
                        "workPhones": workPhones,
                        "additionalNames": additionalNames,
                        "homeInstantMessengers": homeInstantMessengers,
                        "href": href,
                        "id": id,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["photos"]) -> MetaOapg.properties.photos: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["homeEmails"]) -> MetaOapg.properties.homeEmails: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["personalInformation"]) -> MetaOapg.properties.personalInformation: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["homeWebAddresses"]) -> MetaOapg.properties.homeWebAddresses: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["universal_ID"]) -> 'UniversalIDE451ce2c8b48100007c31392a1ff00c2': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["workInstantMessengers"]) -> MetaOapg.properties.workInstantMessengers: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["homePhones"]) -> MetaOapg.properties.homePhones: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["preferredName"]) -> MetaOapg.properties.preferredName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["workEmails"]) -> MetaOapg.properties.workEmails: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["workAddresses"]) -> MetaOapg.properties.workAddresses: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["workWebAddresses"]) -> MetaOapg.properties.workWebAddresses: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["homeAddresses"]) -> MetaOapg.properties.homeAddresses: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["legalName"]) -> MetaOapg.properties.legalName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["audioNamePronunciation"]) -> MetaOapg.properties.audioNamePronunciation: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["socialNetworks"]) -> MetaOapg.properties.socialNetworks: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["workPhones"]) -> MetaOapg.properties.workPhones: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["additionalNames"]) -> MetaOapg.properties.additionalNames: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["homeInstantMessengers"]) -> MetaOapg.properties.homeInstantMessengers: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["photos", "homeEmails", "personalInformation", "homeWebAddresses", "universal_ID", "workInstantMessengers", "homePhones", "preferredName", "workEmails", "workAddresses", "workWebAddresses", "homeAddresses", "legalName", "audioNamePronunciation", "socialNetworks", "workPhones", "additionalNames", "homeInstantMessengers", "href", "id", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["photos"]) -> typing.Union[MetaOapg.properties.photos, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["homeEmails"]) -> typing.Union[MetaOapg.properties.homeEmails, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["personalInformation"]) -> typing.Union[MetaOapg.properties.personalInformation, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["homeWebAddresses"]) -> typing.Union[MetaOapg.properties.homeWebAddresses, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["universal_ID"]) -> typing.Union['UniversalIDE451ce2c8b48100007c31392a1ff00c2', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["workInstantMessengers"]) -> typing.Union[MetaOapg.properties.workInstantMessengers, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["homePhones"]) -> typing.Union[MetaOapg.properties.homePhones, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["preferredName"]) -> typing.Union[MetaOapg.properties.preferredName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["workEmails"]) -> typing.Union[MetaOapg.properties.workEmails, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["workAddresses"]) -> typing.Union[MetaOapg.properties.workAddresses, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["workWebAddresses"]) -> typing.Union[MetaOapg.properties.workWebAddresses, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["homeAddresses"]) -> typing.Union[MetaOapg.properties.homeAddresses, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["legalName"]) -> typing.Union[MetaOapg.properties.legalName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["audioNamePronunciation"]) -> typing.Union[MetaOapg.properties.audioNamePronunciation, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["socialNetworks"]) -> typing.Union[MetaOapg.properties.socialNetworks, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["workPhones"]) -> typing.Union[MetaOapg.properties.workPhones, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["additionalNames"]) -> typing.Union[MetaOapg.properties.additionalNames, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["homeInstantMessengers"]) -> typing.Union[MetaOapg.properties.homeInstantMessengers, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["href"]) -> typing.Union[MetaOapg.properties.href, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["photos", "homeEmails", "personalInformation", "homeWebAddresses", "universal_ID", "workInstantMessengers", "homePhones", "preferredName", "workEmails", "workAddresses", "workWebAddresses", "homeAddresses", "legalName", "audioNamePronunciation", "socialNetworks", "workPhones", "additionalNames", "homeInstantMessengers", "href", "id", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                photos: typing.Union[MetaOapg.properties.photos, str, schemas.Unset] = schemas.unset,
                homeEmails: typing.Union[MetaOapg.properties.homeEmails, str, schemas.Unset] = schemas.unset,
                personalInformation: typing.Union[MetaOapg.properties.personalInformation, str, schemas.Unset] = schemas.unset,
                homeWebAddresses: typing.Union[MetaOapg.properties.homeWebAddresses, str, schemas.Unset] = schemas.unset,
                universal_ID: typing.Union['UniversalIDE451ce2c8b48100007c31392a1ff00c2', schemas.Unset] = schemas.unset,
                workInstantMessengers: typing.Union[MetaOapg.properties.workInstantMessengers, str, schemas.Unset] = schemas.unset,
                homePhones: typing.Union[MetaOapg.properties.homePhones, str, schemas.Unset] = schemas.unset,
                preferredName: typing.Union[MetaOapg.properties.preferredName, str, schemas.Unset] = schemas.unset,
                workEmails: typing.Union[MetaOapg.properties.workEmails, str, schemas.Unset] = schemas.unset,
                workAddresses: typing.Union[MetaOapg.properties.workAddresses, str, schemas.Unset] = schemas.unset,
                workWebAddresses: typing.Union[MetaOapg.properties.workWebAddresses, str, schemas.Unset] = schemas.unset,
                homeAddresses: typing.Union[MetaOapg.properties.homeAddresses, str, schemas.Unset] = schemas.unset,
                legalName: typing.Union[MetaOapg.properties.legalName, str, schemas.Unset] = schemas.unset,
                audioNamePronunciation: typing.Union[MetaOapg.properties.audioNamePronunciation, str, schemas.Unset] = schemas.unset,
                socialNetworks: typing.Union[MetaOapg.properties.socialNetworks, str, schemas.Unset] = schemas.unset,
                workPhones: typing.Union[MetaOapg.properties.workPhones, str, schemas.Unset] = schemas.unset,
                additionalNames: typing.Union[MetaOapg.properties.additionalNames, str, schemas.Unset] = schemas.unset,
                homeInstantMessengers: typing.Union[MetaOapg.properties.homeInstantMessengers, str, schemas.Unset] = schemas.unset,
                href: typing.Union[MetaOapg.properties.href, str, schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    photos=photos,
                    homeEmails=homeEmails,
                    personalInformation=personalInformation,
                    homeWebAddresses=homeWebAddresses,
                    universal_ID=universal_ID,
                    workInstantMessengers=workInstantMessengers,
                    homePhones=homePhones,
                    preferredName=preferredName,
                    workEmails=workEmails,
                    workAddresses=workAddresses,
                    workWebAddresses=workWebAddresses,
                    homeAddresses=homeAddresses,
                    legalName=legalName,
                    audioNamePronunciation=audioNamePronunciation,
                    socialNetworks=socialNetworks,
                    workPhones=workPhones,
                    additionalNames=additionalNames,
                    homeInstantMessengers=homeInstantMessengers,
                    href=href,
                    id=id,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PersonRepresentationE451ce2c8b48100007c312f3f72700b3':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_person_python_sdk.model.universal_ide451ce2c8b48100007c31392a1ff00c2 import UniversalIDE451ce2c8b48100007c31392a1ff00c2
