# coding: utf-8

"""
    person

    The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.

    The version of the OpenAPI document: v4
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from workday_person_python_sdk import schemas  # noqa: F401


class RelativeNamesE08d883b5eae10000403d79fe6d202e3(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def title() -> typing.Type['TitleE08d883b5eae10000403d7b62abb02e7']:
                        return TitleE08d883b5eae10000403d7b62abb02e7
                    middleName = schemas.StrSchema
                
                    @staticmethod
                    def royalSuffix() -> typing.Type['RoyalSuffixE08d883b5eae10000403d7d259db02ed']:
                        return RoyalSuffixE08d883b5eae10000403d7d259db02ed
                
                    @staticmethod
                    def religiousSuffix() -> typing.Type['ReligiousSuffixE08d883b5eae10000403d7eb401e02f2']:
                        return ReligiousSuffixE08d883b5eae10000403d7eb401e02f2
                
                    @staticmethod
                    def localPersonName() -> typing.Type['LocalPersonNameE08d883b5eae10000403d7cd713c02ec']:
                        return LocalPersonNameE08d883b5eae10000403d7cd713c02ec
                    lastName = schemas.StrSchema
                    firstName = schemas.StrSchema
                
                    @staticmethod
                    def honorarySuffix() -> typing.Type['HonorarySuffixE08d883b5eae10000403d7acba9602e5']:
                        return HonorarySuffixE08d883b5eae10000403d7acba9602e5
                
                    @staticmethod
                    def country() -> typing.Type['CountryE08d883b5eae10000403d7c8e60502eb']:
                        return CountryE08d883b5eae10000403d7c8e60502eb
                    secondaryLastName = schemas.StrSchema
                
                    @staticmethod
                    def salutationSuffix() -> typing.Type['SalutationSuffixE08d883b5eae10000403d7d736c102ee']:
                        return SalutationSuffixE08d883b5eae10000403d7d736c102ee
                
                    @staticmethod
                    def relativeType() -> typing.Type['RelativeTypeE08d883b5eae1000040cc1231a5902f5']:
                        return RelativeTypeE08d883b5eae1000040cc1231a5902f5
                
                    @staticmethod
                    def socialSuffix() -> typing.Type['SocialSuffixE08d883b5eae10000403d7dc081502ef']:
                        return SocialSuffixE08d883b5eae10000403d7dc081502ef
                
                    @staticmethod
                    def professionalSuffix() -> typing.Type['ProfessionalSuffixE08d883b5eae10000403d7e2171f02f0']:
                        return ProfessionalSuffixE08d883b5eae10000403d7e2171f02f0
                    fullName = schemas.StrSchema
                
                    @staticmethod
                    def academicSuffix() -> typing.Type['AcademicSuffixE08d883b5eae10000403d7c0735402e9']:
                        return AcademicSuffixE08d883b5eae10000403d7c0735402e9
                
                    @staticmethod
                    def hereditarySuffix() -> typing.Type['HereditarySuffixE08d883b5eae10000403d7efe24b02f3']:
                        return HereditarySuffixE08d883b5eae10000403d7efe24b02f3
                    descriptor = schemas.StrSchema
                    __annotations__ = {
                        "title": title,
                        "middleName": middleName,
                        "royalSuffix": royalSuffix,
                        "religiousSuffix": religiousSuffix,
                        "localPersonName": localPersonName,
                        "lastName": lastName,
                        "firstName": firstName,
                        "honorarySuffix": honorarySuffix,
                        "country": country,
                        "secondaryLastName": secondaryLastName,
                        "salutationSuffix": salutationSuffix,
                        "relativeType": relativeType,
                        "socialSuffix": socialSuffix,
                        "professionalSuffix": professionalSuffix,
                        "fullName": fullName,
                        "academicSuffix": academicSuffix,
                        "hereditarySuffix": hereditarySuffix,
                        "descriptor": descriptor,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["title"]) -> 'TitleE08d883b5eae10000403d7b62abb02e7': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["royalSuffix"]) -> 'RoyalSuffixE08d883b5eae10000403d7d259db02ed': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["religiousSuffix"]) -> 'ReligiousSuffixE08d883b5eae10000403d7eb401e02f2': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["localPersonName"]) -> 'LocalPersonNameE08d883b5eae10000403d7cd713c02ec': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["honorarySuffix"]) -> 'HonorarySuffixE08d883b5eae10000403d7acba9602e5': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["country"]) -> 'CountryE08d883b5eae10000403d7c8e60502eb': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["secondaryLastName"]) -> MetaOapg.properties.secondaryLastName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["salutationSuffix"]) -> 'SalutationSuffixE08d883b5eae10000403d7d736c102ee': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["relativeType"]) -> 'RelativeTypeE08d883b5eae1000040cc1231a5902f5': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["socialSuffix"]) -> 'SocialSuffixE08d883b5eae10000403d7dc081502ef': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["professionalSuffix"]) -> 'ProfessionalSuffixE08d883b5eae10000403d7e2171f02f0': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["fullName"]) -> MetaOapg.properties.fullName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["academicSuffix"]) -> 'AcademicSuffixE08d883b5eae10000403d7c0735402e9': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["hereditarySuffix"]) -> 'HereditarySuffixE08d883b5eae10000403d7efe24b02f3': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["descriptor"]) -> MetaOapg.properties.descriptor: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "middleName", "royalSuffix", "religiousSuffix", "localPersonName", "lastName", "firstName", "honorarySuffix", "country", "secondaryLastName", "salutationSuffix", "relativeType", "socialSuffix", "professionalSuffix", "fullName", "academicSuffix", "hereditarySuffix", "descriptor", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union['TitleE08d883b5eae10000403d7b62abb02e7', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["royalSuffix"]) -> typing.Union['RoyalSuffixE08d883b5eae10000403d7d259db02ed', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["religiousSuffix"]) -> typing.Union['ReligiousSuffixE08d883b5eae10000403d7eb401e02f2', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["localPersonName"]) -> typing.Union['LocalPersonNameE08d883b5eae10000403d7cd713c02ec', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["honorarySuffix"]) -> typing.Union['HonorarySuffixE08d883b5eae10000403d7acba9602e5', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union['CountryE08d883b5eae10000403d7c8e60502eb', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["secondaryLastName"]) -> typing.Union[MetaOapg.properties.secondaryLastName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["salutationSuffix"]) -> typing.Union['SalutationSuffixE08d883b5eae10000403d7d736c102ee', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["relativeType"]) -> typing.Union['RelativeTypeE08d883b5eae1000040cc1231a5902f5', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["socialSuffix"]) -> typing.Union['SocialSuffixE08d883b5eae10000403d7dc081502ef', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["professionalSuffix"]) -> typing.Union['ProfessionalSuffixE08d883b5eae10000403d7e2171f02f0', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["fullName"]) -> typing.Union[MetaOapg.properties.fullName, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["academicSuffix"]) -> typing.Union['AcademicSuffixE08d883b5eae10000403d7c0735402e9', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["hereditarySuffix"]) -> typing.Union['HereditarySuffixE08d883b5eae10000403d7efe24b02f3', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["descriptor"]) -> typing.Union[MetaOapg.properties.descriptor, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "middleName", "royalSuffix", "religiousSuffix", "localPersonName", "lastName", "firstName", "honorarySuffix", "country", "secondaryLastName", "salutationSuffix", "relativeType", "socialSuffix", "professionalSuffix", "fullName", "academicSuffix", "hereditarySuffix", "descriptor", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                title: typing.Union['TitleE08d883b5eae10000403d7b62abb02e7', schemas.Unset] = schemas.unset,
                middleName: typing.Union[MetaOapg.properties.middleName, str, schemas.Unset] = schemas.unset,
                royalSuffix: typing.Union['RoyalSuffixE08d883b5eae10000403d7d259db02ed', schemas.Unset] = schemas.unset,
                religiousSuffix: typing.Union['ReligiousSuffixE08d883b5eae10000403d7eb401e02f2', schemas.Unset] = schemas.unset,
                localPersonName: typing.Union['LocalPersonNameE08d883b5eae10000403d7cd713c02ec', schemas.Unset] = schemas.unset,
                lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
                firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
                honorarySuffix: typing.Union['HonorarySuffixE08d883b5eae10000403d7acba9602e5', schemas.Unset] = schemas.unset,
                country: typing.Union['CountryE08d883b5eae10000403d7c8e60502eb', schemas.Unset] = schemas.unset,
                secondaryLastName: typing.Union[MetaOapg.properties.secondaryLastName, str, schemas.Unset] = schemas.unset,
                salutationSuffix: typing.Union['SalutationSuffixE08d883b5eae10000403d7d736c102ee', schemas.Unset] = schemas.unset,
                relativeType: typing.Union['RelativeTypeE08d883b5eae1000040cc1231a5902f5', schemas.Unset] = schemas.unset,
                socialSuffix: typing.Union['SocialSuffixE08d883b5eae10000403d7dc081502ef', schemas.Unset] = schemas.unset,
                professionalSuffix: typing.Union['ProfessionalSuffixE08d883b5eae10000403d7e2171f02f0', schemas.Unset] = schemas.unset,
                fullName: typing.Union[MetaOapg.properties.fullName, str, schemas.Unset] = schemas.unset,
                academicSuffix: typing.Union['AcademicSuffixE08d883b5eae10000403d7c0735402e9', schemas.Unset] = schemas.unset,
                hereditarySuffix: typing.Union['HereditarySuffixE08d883b5eae10000403d7efe24b02f3', schemas.Unset] = schemas.unset,
                descriptor: typing.Union[MetaOapg.properties.descriptor, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    title=title,
                    middleName=middleName,
                    royalSuffix=royalSuffix,
                    religiousSuffix=religiousSuffix,
                    localPersonName=localPersonName,
                    lastName=lastName,
                    firstName=firstName,
                    honorarySuffix=honorarySuffix,
                    country=country,
                    secondaryLastName=secondaryLastName,
                    salutationSuffix=salutationSuffix,
                    relativeType=relativeType,
                    socialSuffix=socialSuffix,
                    professionalSuffix=professionalSuffix,
                    fullName=fullName,
                    academicSuffix=academicSuffix,
                    hereditarySuffix=hereditarySuffix,
                    descriptor=descriptor,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RelativeNamesE08d883b5eae10000403d79fe6d202e3':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from workday_person_python_sdk.model.academic_suffix_e08d883b5eae10000403d7c0735402e9 import AcademicSuffixE08d883b5eae10000403d7c0735402e9
from workday_person_python_sdk.model.country_e08d883b5eae10000403d7c8e60502eb import CountryE08d883b5eae10000403d7c8e60502eb
from workday_person_python_sdk.model.hereditary_suffix_e08d883b5eae10000403d7efe24b02f3 import HereditarySuffixE08d883b5eae10000403d7efe24b02f3
from workday_person_python_sdk.model.honorary_suffix_e08d883b5eae10000403d7acba9602e5 import HonorarySuffixE08d883b5eae10000403d7acba9602e5
from workday_person_python_sdk.model.local_person_name_e08d883b5eae10000403d7cd713c02ec import LocalPersonNameE08d883b5eae10000403d7cd713c02ec
from workday_person_python_sdk.model.professional_suffix_e08d883b5eae10000403d7e2171f02f0 import ProfessionalSuffixE08d883b5eae10000403d7e2171f02f0
from workday_person_python_sdk.model.relative_type_e08d883b5eae1000040cc1231a5902f5 import RelativeTypeE08d883b5eae1000040cc1231a5902f5
from workday_person_python_sdk.model.religious_suffix_e08d883b5eae10000403d7eb401e02f2 import ReligiousSuffixE08d883b5eae10000403d7eb401e02f2
from workday_person_python_sdk.model.royal_suffix_e08d883b5eae10000403d7d259db02ed import RoyalSuffixE08d883b5eae10000403d7d259db02ed
from workday_person_python_sdk.model.salutation_suffix_e08d883b5eae10000403d7d736c102ee import SalutationSuffixE08d883b5eae10000403d7d736c102ee
from workday_person_python_sdk.model.social_suffix_e08d883b5eae10000403d7dc081502ef import SocialSuffixE08d883b5eae10000403d7dc081502ef
from workday_person_python_sdk.model.title_e08d883b5eae10000403d7b62abb02e7 import TitleE08d883b5eae10000403d7b62abb02e7
